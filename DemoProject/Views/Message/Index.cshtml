@using Kendo.Mvc.UI
@using DemoProject.Model
@using DemoProject.Controllers
@using DemoProject.Helper
@{
    string formCode = AuthorizeFormAccess.FormAccessCode.MESSAGE.ToString();
    var formName = FormUtility.GetFormName(formCode);
    string parentFormname = FormUtility.GetParentFormName(formCode);
    ViewBag.Title = formName;
    BaseController _base = new BaseController();
    bool AllowedEdit = _base.CheckPermission(formCode, AccessPermission.IsEdit);
    bool AllowedAdd = _base.CheckPermission(formCode, AccessPermission.IsAdd);
}
@Html.Hidden("hdnFormAccessCode", formCode)
<div class="coman_content">
    <!--This is Title div -->
    <div class="subheader">
        <div class="left_title">
            <h2>@ViewBag.Title</h2>
            <div class="left breadcrumb_list">
                <ul>
                    <li><a href="@Url.Action("Index","Home")"><i class="fa fa-home"></i></a></li>
                    <li><a href="javascript:void(0)">@parentFormname</a></li>
                    <li>@formName</li>
                </ul>
            </div>
        </div>
        <div class="subheader_right">
            @if (AllowedAdd)
            {
                <a class="button button_primary button_rounded" href="javascript:void(0);" id="btnAdd">Add New Message</a>
            }
        </div>
    </div>
    <!--END Title div-->
    <div class="common_white_box listingpage inlinegrid_edit">
        <div class="page-loader k-loading-image"></div>
        @(Html.Kendo().Grid<DemoProject.Model.MessageGridModel>()
          .Name("gridmessage")
          .Columns(columns =>
          {
              columns.Bound(c => c.Id).Hidden(true);
              columns.Bound(c=>c.UpdatedOn).Hidden(true);
              columns.Bound(c => c.Code).Title("Code").ClientTemplate("<span class='uppercase' >#=Code#</span>");
              columns.Bound(c => c.Message).Title("Message");
              columns.Bound(c => c.Comment).Title("Comment").Width(300);
              columns.Bound(c => c.IsActive).Width("5%").HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center-text" }).ClientTemplate("# if(IsActive == true) {#<i class='fa fa-check'></i># } else { #<i class='fa fa-close'></i># } #").Title("Active").Filterable(filterable => filterable.Messages(m => m.IsFalse("No").IsTrue("Yes")));
              columns.Command(command => { command.Edit(); }).Width(50).Hidden(!(AllowedAdd || AllowedEdit)).Title("Edit");
          })
          .ToolBar(toolbar => toolbar.Create())
          .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_MessageEditor"))
          .Events(evt => evt
              .DataBinding("fnKendoGridCommonDataBinding")
              .DataBound("fnKendoGridDataBoundEventForMessage")
          )
          .NoRecords("No record found")
          .Sortable()
          .Pageable(pageable => pageable
              .Refresh(true)
              .PageSizes(new[] {10,20, 50, 100, 200 })
              .ButtonCount(5)
          )
        .Filterable(filter => filter
                .Mode(GridFilterMode.Row)
                .Extra(false)
                .Operators(o => o.ForString(f => f.Clear().Contains("Contains").DoesNotContain("Does Not Contain").StartsWith("Starts With").EndsWith("Ends With").IsEqualTo("Equal To").IsNotEqualTo("Not Equal To")))
                .Operators(o => o.ForNumber(g => g.Clear().IsEqualTo("EqualTo").IsNotEqualTo("Not Equal To").IsGreaterThan("Greater Than").IsGreaterThanOrEqualTo("Greater Than Or Equal To").IsLessThan("Less Than").IsLessThanOrEqualTo("Less Than Or Equal To")))
            )
            .Events(events => events.Edit("onGridEdit"))
          .DataSource(dataSource => dataSource
                   .Ajax()
                   .Sort(sort=>sort.Add("Code").Ascending())
                   .Create(create => create.Action("Message_Create", "Message"))
                   .Read(read => read.Action("GetGridData", "Message"))
                   .Update(update => update.Action("Message_Update", "Message"))
                   .Destroy(destroy => destroy.Action("Message_Destroy", "Message"))
                   .Events(events => events.Error("error_handler"))
                   .PageSize(10)
                .Model(model =>
                {
                    model.Id(c => c.Id);
                    model.Field(c => c.Id).Editable(false);
                })
          ))
    </div>
</div>
<script>
    $(document).ready(function () {
        $('#gridmessage').data('kendoGrid').dataSource.read();
        $('#gridmessage').data('kendoGrid').refresh();

        $('#btnAdd').click(function () {
            grid = $("#gridmessage").data('kendoGrid');
            grid.addRow();
        });
    });
    function fnKendoGridDataBoundEventForMessage() {
        $(".k-grid-toolbar").hide();
        fnKendoGridDataBoundEvent.apply(this);
    }
    function onGridEdit(e) {
        if (e.model.Id > 0) {
            $('[name="Code"]').attr("readonly", "readonly");
        }
    }
</script>
<style>
    .uppercase {
        text-transform: uppercase !important;
    }
</style>